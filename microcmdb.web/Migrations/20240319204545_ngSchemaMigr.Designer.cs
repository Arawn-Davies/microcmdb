// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using microcmdb.Web.Data;

#nullable disable

namespace microcmdb.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240319204545_ngSchemaMigr")]
    partial class ngSchemaMigr
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("microcmdb.Web.Models.CINodeMapping", b =>
                {
                    b.Property<int>("CINodeMappingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfigItemID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CINodeMappingID");

                    b.HasIndex("ConfigItemID")
                        .IsUnique();

                    b.HasIndex("NodeID")
                        .IsUnique();

                    b.ToTable("CINodeMappings");
                });

            modelBuilder.Entity("microcmdb.Web.Models.ConfigItem", b =>
                {
                    b.Property<int>("ConfigItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeployLoc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigItemID");

                    b.ToTable("ConfigItems");
                });

            modelBuilder.Entity("microcmdb.Web.Models.Host", b =>
                {
                    b.Property<int>("HostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("HostID");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("microcmdb.Web.Models.HostServiceMapping", b =>
                {
                    b.Property<int>("HostID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HostServiceMappingID")
                        .HasColumnType("INTEGER");

                    b.HasKey("HostID", "ServiceID");

                    b.HasIndex("ServiceID")
                        .IsUnique();

                    b.ToTable("HostServiceMappings");
                });

            modelBuilder.Entity("microcmdb.Web.Models.NetworkUser", b =>
                {
                    b.Property<int>("NetworkUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("NetworkUserID");

                    b.ToTable("NetworkUsers");
                });

            modelBuilder.Entity("microcmdb.Web.Models.NetworkUserMapping", b =>
                {
                    b.Property<int>("NodeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NetworkUserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NetworkUserMappingID")
                        .HasColumnType("INTEGER");

                    b.HasKey("NodeID", "NetworkUserID");

                    b.HasIndex("NetworkUserID");

                    b.ToTable("UserMappings");
                });

            modelBuilder.Entity("microcmdb.Web.Models.Node", b =>
                {
                    b.Property<int>("NodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPU_Arch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IPaddr")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OS_Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("RAM")
                        .HasColumnType("REAL");

                    b.Property<double?>("Storage")
                        .HasColumnType("REAL");

                    b.HasKey("NodeID");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("microcmdb.Web.Models.NodeHostMapping", b =>
                {
                    b.Property<int>("NodeHostMappingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HostID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("NodeHostMappingID");

                    b.HasIndex("HostID")
                        .IsUnique();

                    b.HasIndex("NodeID")
                        .IsUnique();

                    b.ToTable("NodeHostMappings");
                });

            modelBuilder.Entity("microcmdb.Web.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PortNum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("microcmdb.Web.Models.Software", b =>
                {
                    b.Property<int>("SoftwareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Developer")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SoftwareID");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("microcmdb.Web.Models.SoftwareInstallation", b =>
                {
                    b.Property<int>("NodeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SoftwareID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SoftwareInstallationID")
                        .HasColumnType("INTEGER");

                    b.HasKey("NodeID", "SoftwareID");

                    b.HasIndex("SoftwareID");

                    b.ToTable("SoftwareInstallations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("microcmdb.Web.Models.CINodeMapping", b =>
                {
                    b.HasOne("microcmdb.Web.Models.ConfigItem", "ConfigItem")
                        .WithOne("CINodeMapping")
                        .HasForeignKey("microcmdb.Web.Models.CINodeMapping", "ConfigItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("microcmdb.Web.Models.Node", "Node")
                        .WithOne("CINodeMapping")
                        .HasForeignKey("microcmdb.Web.Models.CINodeMapping", "NodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigItem");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("microcmdb.Web.Models.HostServiceMapping", b =>
                {
                    b.HasOne("microcmdb.Web.Models.Host", "Host")
                        .WithMany("HostServices")
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("microcmdb.Web.Models.Service", "Service")
                        .WithOne("HostServiceMapping")
                        .HasForeignKey("microcmdb.Web.Models.HostServiceMapping", "ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("microcmdb.Web.Models.NetworkUserMapping", b =>
                {
                    b.HasOne("microcmdb.Web.Models.NetworkUser", "NetworkUser")
                        .WithMany("AllowedNodes")
                        .HasForeignKey("NetworkUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("microcmdb.Web.Models.Node", "Node")
                        .WithMany("NetworkUsers")
                        .HasForeignKey("NodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NetworkUser");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("microcmdb.Web.Models.NodeHostMapping", b =>
                {
                    b.HasOne("microcmdb.Web.Models.Host", "Host")
                        .WithOne("NodeHostMapping")
                        .HasForeignKey("microcmdb.Web.Models.NodeHostMapping", "HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("microcmdb.Web.Models.Node", "Node")
                        .WithOne("AssocHost")
                        .HasForeignKey("microcmdb.Web.Models.NodeHostMapping", "NodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("microcmdb.Web.Models.SoftwareInstallation", b =>
                {
                    b.HasOne("microcmdb.Web.Models.Node", "Node")
                        .WithMany("InstalledSoftware")
                        .HasForeignKey("NodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("microcmdb.Web.Models.Software", "Software")
                        .WithMany("InstalledOn")
                        .HasForeignKey("SoftwareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("microcmdb.Web.Models.ConfigItem", b =>
                {
                    b.Navigation("CINodeMapping");
                });

            modelBuilder.Entity("microcmdb.Web.Models.Host", b =>
                {
                    b.Navigation("HostServices");

                    b.Navigation("NodeHostMapping")
                        .IsRequired();
                });

            modelBuilder.Entity("microcmdb.Web.Models.NetworkUser", b =>
                {
                    b.Navigation("AllowedNodes");
                });

            modelBuilder.Entity("microcmdb.Web.Models.Node", b =>
                {
                    b.Navigation("AssocHost");

                    b.Navigation("CINodeMapping");

                    b.Navigation("InstalledSoftware");

                    b.Navigation("NetworkUsers");
                });

            modelBuilder.Entity("microcmdb.Web.Models.Service", b =>
                {
                    b.Navigation("HostServiceMapping")
                        .IsRequired();
                });

            modelBuilder.Entity("microcmdb.Web.Models.Software", b =>
                {
                    b.Navigation("InstalledOn");
                });
#pragma warning restore 612, 618
        }
    }
}
